<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Florent Flament's Tech Blog</title><link href="http://www.florentflament.com/blog/" rel="alternate"></link><link href="http://www.florentflament.com/blog/feeds/misc.atom.xml" rel="self"></link><id>http://www.florentflament.com/blog/</id><updated>2014-06-28T00:00:00+02:00</updated><entry><title>Git SSH Docker container</title><link href="http://www.florentflament.com/blog/git-ssh-docker-container.html" rel="alternate"></link><updated>2014-06-28T00:00:00+02:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com/blog,2014-06-28:git-ssh-docker-container.html</id><summary type="html">&lt;p&gt;My favorite option to backup and version my code and text files is
using git with a remote repository. The implementation I have chosen
for that consists in running an ssh server, with git, in a Docker
container. This has the following advantages over other solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100% reproducible;&lt;/li&gt;
&lt;li&gt;Limits access to the container in case the account is compromised;&lt;/li&gt;
&lt;li&gt;Consumes less resources that running a VM.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;The proposed Git SSH Dockerfile is based on the &lt;a href="https://docs.docker.com/examples/running_ssh_service/"&gt;Dockerizing an SSH
service&lt;/a&gt; example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FROM ubuntu:14.04

RUN apt-get -y update
RUN apt-get -y install openssh-server
RUN apt-get -y install git

&lt;span class="c"&gt;# Setting openssh&lt;/span&gt;
RUN mkdir /var/run/sshd
RUN sed -i &lt;span class="s2"&gt;&amp;quot;s/#PasswordAuthentication yes/PasswordAuthentication no/&amp;quot;&lt;/span&gt; /etc/ssh/sshd_config

&lt;span class="c"&gt;# Adding git user&lt;/span&gt;
RUN adduser --system git
RUN mkdir -p /home/git/.ssh

&lt;span class="c"&gt;# Clearing and setting authorized ssh keys&lt;/span&gt;
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &amp;gt; /home/git/.ssh/authorized_keys
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;First SSH public key&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /home/git/.ssh/authorized_keys
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Second SSH public key&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /home/git/.ssh/authorized_keys
&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="c"&gt;# Updating shell to bash&lt;/span&gt;
RUN sed -i s#/home/git:/bin/false#/home/git:/bin/bash# /etc/passwd

EXPOSE 22
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running the container&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Building the image&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker.io build -t git-ssh_img .
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running the image&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo docker.io run -p 1234:22 -d --name git-ssh git-ssh_img
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The previous command maps the container's host port 1234 on the
container's SSH port. Of course, this port can be changed to any
value. One can then ssh to the container with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh -p 1234 git@&amp;lt;container_host&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Git"></category><category term="SSH"></category><category term="Docker"></category></entry><entry><title>Securing Data</title><link href="http://www.florentflament.com/blog/securing-data.html" rel="alternate"></link><updated>2014-05-03T23:34:00+02:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com/blog,2014-05-03:securing-data.html</id><summary type="html">&lt;p&gt;As a data geek, I've been wondering how I could protect my data from
the main threats (if possible by using only open source software). For
instance, losing data because of a hardware failure is just something
that shouldn't happen anymore, thanks to all the technology available
today. One could argue that cloud storage services may be the
solution, which may be true to deal with hardware failure; but there
are other threats to be taken into account that are worsen by the use
of the such services (I'm thinking about piracy).&lt;/p&gt;
&lt;p&gt;So what's the need in term of data safety, security and availability?
Well here's how I would summarize my ideal target. I basically wish to
protect my data against most threats, while still being able to access
it according to my usage. I've been thinking about the following
threats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Hardware failure (Hard disk failure)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Piracy (Pirate breaking into ones computer / online account)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Human mistakes (mistakenly deleting important data)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Theft (Losing data stored on the stolen hardware, thieves abusing
  of sensitive data).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Data Safety and Security&lt;/h1&gt;
&lt;p&gt;Basically, data protection may be split into two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Data Safety, consisting in measures against hardware failures and
  human mistakes (also natural disasters if we really want to ensure a
  first grade safety level);&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Data Security, consisting in protecting data against theft and
  piracy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data Safety&lt;/h2&gt;
&lt;p&gt;In order to avoid losing data because of hardware failure data should
be duplicated. So that if a hard disk fails, the data still remains on
the second disk. Some technologies like RAID (Hardware or Software),
provide such service by performing real time data duplication on
several disks.&lt;/p&gt;
&lt;p&gt;To deal with natural disasters, like fires or floods, we may duplicate
our data at distant locations. This is becoming easier with new
technologies like &lt;a href="http://ceph.com/"&gt;Ceph&lt;/a&gt; or &lt;a href="http://www.openstack.org/software/openstack-storage/"&gt;OpenStack Swift&lt;/a&gt;, that allow real
time duplication of data on distant storage nodes.&lt;/p&gt;
&lt;p&gt;Another category of threat (maybe the most frequent) is human
mistake. One can easily delete an important file by mistake. The good
old solution to deal with such issues is doing regular backups. While
this is a very good idea, depending on the frequency of the backups,
we may accidentally loose some recent data that didn't have the time
to be saved. There are other means to ensure data can be recovered
even after being deleted, such as versioning by using tools like
&lt;a href="http://git-scm.com/"&gt;git&lt;/a&gt;, or &lt;a href="http://owncloud.org/"&gt;ownCloud&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Data Security&lt;/h2&gt;
&lt;p&gt;Piracy is a quite broad topic. However, by following a few simple
rules, we may avoid most of piracy threats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Don't store online data that we don't need to have online. Online
  data have much more chances of being stolen than offline data (or
  data available in a private network); If pirates cannot access the
  data through the network, it is much more complicated to gain access
  to it. This is the main reason why I believe that cloud storage may
  not be the best solution for everything. If by chance a pirate
  guesses one's cloud storage account password, he can then access
  freely any data that has been stored there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Strongly encrypt private data that may be accessed by pirates or
  thieves. Basically any data may potentially be accessed by pirates or
  thieves, but as written previously, online data is much more
  vulnerable, and should therefore be encrypted in priority.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Theft can happen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To deal with the issue of loosing its data because of its laptop
  being stolen, we may use some solutions that were discussed
  previously to ensure data safety. Good old backups are still a
  working solution; real time duplication at different locations is
  another one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To deal with private data exploit (meaning malicious usage of
  private data by thieves), encryption is a good option. By ensuring
  that the thieves cannot decrypt the data, we protect us against such
  scenario.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Cost of Protection&lt;/h2&gt;
&lt;p&gt;All these measures for ensuring a proper data protection do have a
cost. To duplicate our data, we need twice as much hard disks than if
we don't. To encrypt our data and decrypt it on the fly to read it
consumes more CPU than processing plain files. Although storage costs
as well as computing costs have collapsed these last years, we may be
smart by &lt;a href="http://www.florentflament.com/blog/data-management.html"&gt;categorizing our data&lt;/a&gt; (e.g: public versus private data,
text documents versus binary files, small versus large files, ...) and
apply different safety and security measures accordingly.&lt;/p&gt;
&lt;h1&gt;Layered architecture&lt;/h1&gt;
&lt;p&gt;Now we need to find out an overall solution that will meet our
requirements. There is not a single tool I can think of that provides
all of the features mentioned in this article. To build our overall
solutions, we'll need to have several tools work together. The
approach I thought about is to split our need into features provided
by different layers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A versioning layer (git, owncloud, ...) that keeps track of the
  history of our data and allows recovering data that has been
  accidentally deleted or altered.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An exposition layer, which is more a functional layer that a
  security one, that make data available according to our
  requirements.  For instance, it makes sense to have emails available
  from the internet through IMAPs, while other data may only be
  available through ssh from a host on the private network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An encryption layer to deal with private data abuse by
  thieves. Technologies like dm-crypt, LUKS and Truecrypt seem to be
  good candidates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A (possibly redundant) storage backend: object storage, block
  storage or file system (ceph, RAID, ...). First thoughts lead me to
  think about using Ceph as a backend storage. However, it happens
  that Ceph monitor's play a crucial role and may become a SPOF
  (single point of failure) if not redundant. Also they must be an odd
  number, which means at least 3 nodes are required. A simpler RAID
  approach with regular backups seems to be a good compromise for
  small infrastructures.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And regular backups. This is cheap, easy to implement, and deals
  with most of our issues. However, the efficiency of backups directly
  depends on their frequency, since work done between successive
  backups will be lost in case of hardware failure, human mistake or
  theft.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example table&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;+------------------+-------------+--------+-------------+-------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Emails&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Binary&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Binary&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;      &lt;span class="n"&gt;Threat&lt;/span&gt;      &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;important&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;throwable&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+-------------+--------+-------------+-------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;                                    &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="n"&gt;git&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt;                 &lt;span class="n"&gt;None&lt;/span&gt;               &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Human&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;                                    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+-------------+--------+---------------------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;                           &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Exposition&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="n"&gt;ssh&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;IMAPs&lt;/span&gt;  &lt;span class="o"&gt;|&lt;/span&gt;            &lt;span class="n"&gt;NFS&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt;        &lt;span class="o"&gt;|&lt;/span&gt;                           &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+-------------------&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt; &lt;span class="n"&gt;devices&lt;/span&gt; &lt;span class="o"&gt;----------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;                      &lt;span class="o"&gt;|&lt;/span&gt;                           &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Encryption&lt;/span&gt; &lt;span class="n"&gt;layer&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="n"&gt;LUKS&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;           &lt;span class="n"&gt;None&lt;/span&gt;            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Theft&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abuse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;                      &lt;span class="o"&gt;|&lt;/span&gt;                           &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+-------------------&lt;/span&gt; &lt;span class="n"&gt;Block&lt;/span&gt; &lt;span class="n"&gt;devices&lt;/span&gt; &lt;span class="o"&gt;----------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;                                                  &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Redundancy&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="n"&gt;Disks&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;RAID&lt;/span&gt;                    &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;                                                  &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;       &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+------------------------------------+-------------+------------------+&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;                                    &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Human&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;    &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Backup&lt;/span&gt;           &lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="n"&gt;Regular&lt;/span&gt; &lt;span class="n"&gt;snapshots&lt;/span&gt;          &lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="n"&gt;None&lt;/span&gt;     &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Theft&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loss&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;   &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;                                    &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Piracy&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;         &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt;                  &lt;span class="o"&gt;|&lt;/span&gt;                                    &lt;span class="o"&gt;|&lt;/span&gt;             &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Hardware&lt;/span&gt; &lt;span class="n"&gt;failure&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;+------------------+------------------------------------+-------------+------------------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Data Safety"></category><category term="Data Security"></category></entry><entry><title>Chef Server on Raspberry Pi</title><link href="http://www.florentflament.com/blog/chef-server-on-raspberry-pi.html" rel="alternate"></link><updated>2014-03-03T00:00:00+01:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com/blog,2014-03-03:chef-server-on-raspberry-pi.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; devices are cheap, quiet, and powerful enough to run
a Debian based Linux Operating System called &lt;a href="http://www.raspbian.org/"&gt;Raspbian&lt;/a&gt;. Such
device would be very convenient to manage one's personal
infrastructure, composed of some physical and / or virtual machines,
by running Chef Server.&lt;/p&gt;
&lt;p&gt;While, the official Chef website mostly documents &lt;a href="http://www.getchef.com/chef/install/#tab2"&gt;the installation of
Chef Server on Ubuntu and (Red Hat) Enterprise Linux&lt;/a&gt;, Chef Server
is available through its API and already packaged for Raspbian as
package &lt;code&gt;chef-server-api&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The installation of Chef Server on a Raspberry Pi is therefore quite
forward. The steps to follow, that are described below, are somehow
inspired from these &lt;a href="http://www.cschramm.net/howtos/installing-chef-server-debian/"&gt;instructions to have Chef Server installed on
Debian using binary packages&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installation procedure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start from a fresh installation of Raspbian on a Raspberry Pi. From
NOOBS menu, install Raspbian (Using NOOBS v1.2.1).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Chef Server binary package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo apt-get install chef-server-api
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure Chef Server, by answering to the two questions that will
  be asked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL of Chef server: http://CHEF_SERVER_IP:4000&lt;/li&gt;
&lt;li&gt;Chef AMQP user password: RANDOM_PASSWORD (Avoid using special
  characters)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: Some services won't start, like jetty. &lt;code&gt;chef-server&lt;/code&gt; will also
be said to have failed, but Chef Server APIs will be working anyway.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing:&lt;div class="highlight"&gt;&lt;pre&gt;root@raspberrypi:~# knife configure -i
WARNING: No knife configuration file found
Where should I put the config file? [/root/.chef/knife.rb] 
Please enter the chef server URL: [http://raspberrypi:4000] http://CHEF_SERVER_IP:4000
Please enter a clientname for the new client: [pi] root
Please enter the existing admin clientname: [chef-webui] 
Please enter the location of the existing admin client&amp;#39;s private key: [/etc/chef/webui.pem] 
Please enter the validation clientname: [chef-validator] 
Please enter the location of the validation key: [/etc/chef/validation.pem] 
Please enter the path to a chef repository (or leave blank): 
Creating initial API user...
Created client[root]
Configuration file written to /root/.chef/knife.rb
root@raspberrypi:~# knife client list
  chef-validator
  chef-webui
  root
root@raspberrypi:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Update of 2014/03/03&lt;/h2&gt;
&lt;p&gt;Note that I hit the bug &lt;a href="https://tickets.opscode.com/browse/CHEF-3170"&gt;Rabbitmq does not appear to get configured
when installing chef-server via deb packages&lt;/a&gt;. I got errors when
launching commands &lt;code&gt;knife client create&lt;/code&gt; or &lt;code&gt;knife client reregister&lt;/code&gt;,
with following message in &lt;code&gt;rabbitmq&lt;/code&gt; log:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;=ERROR REPORT==== 4-Jun-2012::14:56:01 ===
exception on TCP connection &amp;lt;0.583.0&amp;gt; from 127.0.0.1:34143
{channel0_error,starting,
    {amqp_error,access_refused,
        &amp;quot;AMQPLAIN login refused: user &amp;#39;chef&amp;#39; - invalid credentials&amp;quot;,
        &amp;#39;connection.start_ok&amp;#39;}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fix consists in executing the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo rabbitmqctl add_vhost /chef
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo rabbitmqctl add_user chef PASSWORD_PER_CONFIGURATION
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo rabbitmqctl set_permissions -p /chef chef &lt;span class="s2"&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Chef"></category><category term="Raspberry Pi"></category><category term="Raspbian"></category></entry><entry><title>Data management</title><link href="http://www.florentflament.com/blog/data-management.html" rel="alternate"></link><updated>2014-02-27T00:00:00+01:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com/blog,2014-02-27:data-management.html</id><summary type="html">&lt;p&gt;When using several computers (or devices) from different locations,
the question of data management arises. Basically, I wish being able
to access my data from any computer; I wish my data to be protected,
accordingly to its privacy and I wish my data to be backed up
appropriately.&lt;/p&gt;
&lt;p&gt;With the arrival of Cloud technologies, some of the requirements
become easier to satisfy. For instance, when using online storage,
data is automatically backed up. But in the same time, the question of
data management takes all of its meaning, because we surely don't want
any information to become public. Hence comes the need to classify its
data according to its privacy level, and to use appropriate storage
backend according to data privacy levels.&lt;/p&gt;
&lt;h2&gt;Data classification&lt;/h2&gt;
&lt;p&gt;I chose four levels of classification, because it makes sense to me
and map well with storage backend that will be described later. I'll
also borrow some terminology from security guys:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;White data (i.e. public data): this is a blog post, Open Source
  code, or any information that we want to make available to everyone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grey data: this is all the data that I'd gladly share with my
  friends, but do not want my worse enemy to have access to. Fall in
  this category: interesting documents that I found online or public
  information based notes that are not good enough to make a blog
  post.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Black data: private data, that only trusted people should have
  access to. I'd put in this category any personal documents, from
  emails (some being potentially private) and picture of my holidays
  to administrative documents (ID scans, ...).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Red data: data that only I should have access to, typically
  credentials (passwords, keys, ...).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the content of these categories may depend on each one's
perception of data privacy. For instance, I put pictures of holidays
in the 'Black data', but we can also consider that pictures of
landscapes may go into the 'Gray data' category.&lt;/p&gt;
&lt;h2&gt;Storage backend&lt;/h2&gt;
&lt;p&gt;So where to store our data? Well now that we've classified our data,
we can choose where we will store it according to the category it is
into.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;White data: The easiest. There are many services on internet that
  will host your public data for free, or almost. For instance, Open
  Source code can be stored into public repositories like &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt;,
  or &lt;a href="https://bitbucket.org/"&gt;Bitbucket&lt;/a&gt;. Blogs can be published on &lt;a href="https://wordpress.org/"&gt;WordPress&lt;/a&gt;, &lt;a href="http://pages.github.com/"&gt;GitHub
  Pages&lt;/a&gt; or some personal web site. These services provide both
  availability of the data from anywhere, and easy / automatic backup
  (especially when using a versioning tools like git on GitHub).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grey data: These data would typically be stored online on a
  "personal" account, which access is restricted by a password. We
  assume that the service provider has full access to the clear data,
  and that this data may be compromised by an attacker. With new cloud
  services available, like free online storage provided by
  &lt;a href="http://www.cloudwatt.com/"&gt;Cloudwatt&lt;/a&gt; or &lt;a href="http://www.dropbox.com/"&gt;Dropbox&lt;/a&gt;, it becomes very easy to have files
  stored online and available from multiple locations, backup possibly
  performed automatically (by default the OpenStack object storage
  module, Swift, uses three copies of each file stored in its data
  store) and possibly versioned (Swift provides an option to
  automatically keep several version of each file). A distributed
  network filesystem on &lt;a href="http://ceph.com/"&gt;Ceph&lt;/a&gt;, may be another approach.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Black data: This data should be stored in a way that provides a fair
  level of data protection, since we typically don't want our service
  provider or hackers to have access to it. There are two completely
  opposite solutions for this: keep this private data locally and not
  put it online at all; or store this data online encrypted with
  strong cryptography algorithms (for instance by using
  &lt;a href="http://duplicity.nongnu.org/"&gt;duplicity&lt;/a&gt;). Having its data stored online (encrypted) allows us
  to benefit from automatic backup and ubiquity, but is riskier that
  the local storage solution. When stored online encrypted, a security
  breach in the software used to protect the data would allow
  attackers to recover all of the private data. When stored locally,
  backup has to be done by ourselves and the data may not be as easily
  available from different locations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Red data: Data in this category are typically keys used to decrypt
  Black data, or passwords to access online services. This data should
  be very well protected. The best way to achieve such level of
  protection is to keep this data locally AND encrypted. This way even
  if the data is stolen, it cannot be read. Backup has to be done
  locally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Data management"></category></entry><entry><title>ZNC in Docker container</title><link href="http://www.florentflament.com/blog/znc-in-docker-container.html" rel="alternate"></link><updated>2013-12-15T00:00:00+01:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com/blog,2013-12-15:znc-in-docker-container.html</id><summary type="html">&lt;p&gt;&lt;a href="http://wiki.znc.in/ZNC"&gt;ZNC&lt;/a&gt; is a popular IRC bouncer, which stays connected to IRC
channels and log conversations while one isn't connected. This note
desrcibes how to launch ZNC in a &lt;a href="https://www.docker.io/"&gt;Docker&lt;/a&gt; container, so that it be
launched on any Docker enabled platform. To quick start with Docker,
one can follow the steps proposed to &lt;a href="http://docs.docker.io/en/latest/installation/ubuntulinux/"&gt;install Docker on an Ubuntu
Linux&lt;/a&gt; (for instance in a VM).&lt;/p&gt;
&lt;h2&gt;Using ZNC setup wizard&lt;/h2&gt;
&lt;p&gt;Once Docker is installed on the system, we can prepare an image that
will be used to run ZNC with the following &lt;code&gt;Dockerfile&lt;/code&gt; (Docker
configuration file):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FROM ubuntu:precise
MAINTAINER Florent Flament

# Using fr ubuntu mirrors and adding universe repository, to install znc
RUN echo &amp;quot;deb http://fr.archive.ubuntu.com/ubuntu precise main restricted&amp;quot; \
&amp;gt; /etc/apt/sources.list
RUN echo &amp;quot;deb http://fr.archive.ubuntu.com/ubuntu precise universe&amp;quot; \
&amp;gt;&amp;gt; /etc/apt/sources.list

# Installing znc package
RUN apt-get -y update
RUN apt-get -y install znc

# Creating directory to store znc configuration
RUN mkdir -m 775 /var/znc
RUN chgrp daemon /var/znc
USER daemon
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's assume that the &lt;code&gt;Dockerfile&lt;/code&gt; is stored in the &lt;code&gt;znc-noconf&lt;/code&gt;
directory. We can build the ZNC ready image with the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t znc:noconf znc-noconf/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next step is to configure ZNC. The following command will run the
configuration wizard in a new container based on the previously
generated image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -i -t znc:noconf -d /var/znc -c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After having answered to all the questions, ZNC will generate its
configuration files. It will then be ready to run in daemon mode. Now
we can save a Docker image including ZNC's configuration files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ CONT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;docker ps -a | grep &lt;span class="s2"&gt;&amp;quot;minutes ago&amp;quot;&lt;/span&gt; | head -1 | awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;docker commit &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; -run&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;Cmd&amp;quot;: [&amp;quot;/usr/bin/znc&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;-d&amp;quot;, &amp;quot;/var/znc/&amp;quot;], &amp;quot;User&amp;quot;: &amp;quot;daemon&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; &lt;span class="nv"&gt;$CONT&lt;/span&gt; znc:ready
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The ZNC image is now ready, and can be launched. In addition to launch
ZNC in a new container, the following command will map the host's 6697
TCP port on the container's 6697 port (assuming that ZNC has been
configured to listen to port 6697).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 6697:6697 znc:ready
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using a previously made ZNC configuration file&lt;/h2&gt;
&lt;p&gt;One can setup a ZNC Docker container even quicker if he already has a
&lt;code&gt;znc.conf&lt;/code&gt; configuration file. One has to create a directory (for
instance &lt;code&gt;myznc/&lt;/code&gt;) containing both: &lt;code&gt;znc.conf&lt;/code&gt; and a &lt;code&gt;Dockerfile&lt;/code&gt;, with
the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;FROM ubuntu:precise
MAINTAINER Florent Flament

# Using fr ubuntu mirrors and adding universe repository, to install znc
RUN echo &amp;quot;deb http://fr.archive.ubuntu.com/ubuntu precise main restricted&amp;quot; \
&amp;gt; /etc/apt/sources.list
RUN echo &amp;quot;deb http://fr.archive.ubuntu.com/ubuntu precise universe&amp;quot; \
&amp;gt;&amp;gt; /etc/apt/sources.list

# Installing znc package
RUN apt-get -y update
RUN apt-get -y install znc

# Creating directory to store znc configuration
RUN mkdir -m 775 /var/znc
# Generates key for SSL exchanges
RUN /usr/bin/znc -d /var/znc -p
# Copies ZNC configuration file
ADD znc.conf /var/znc/configs/
RUN chown -R daemon:daemon /var/znc
USER daemon

# Setting default container&amp;#39;s command
CMD [&amp;quot;/usr/bin/znc&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;-d&amp;quot;, &amp;quot;/var/znc/&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then the ZNC container can be launched right after having built the image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker build -t znc:myznc myznc/
&lt;span class="nv"&gt;$ &lt;/span&gt;docker run -d -p 6697:6697 znc:myznc
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Update 2014/02/25&lt;/h2&gt;
&lt;p&gt;Here's an example of ZNC configuration file listening for SSL incoming
connexions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Listener4&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;6697&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;USER1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;Pass&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PASSWORDHASHHERE&lt;/span&gt;
        &lt;span class="n"&gt;Admin&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="n"&gt;Nick&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NICK1&lt;/span&gt;
        &lt;span class="n"&gt;AltNick&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NICK2&lt;/span&gt;
        &lt;span class="n"&gt;Ident&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NICK1&lt;/span&gt;
        &lt;span class="n"&gt;RealName&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;REALNAME&lt;/span&gt;
        &lt;span class="n"&gt;Buffer&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
        &lt;span class="n"&gt;KeepBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="n"&gt;ChanModes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;stn&lt;/span&gt;
        &lt;span class="n"&gt;LoadModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;
        &lt;span class="n"&gt;Server&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;irc.freenode.net&lt;/span&gt; &lt;span class="mi"&gt;6667&lt;/span&gt; 
        &lt;span class="n"&gt;BindHost&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;USER2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;Pass&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PASSWORDHASHHERE&lt;/span&gt;
        &lt;span class="n"&gt;Admin&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="n"&gt;Nick&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NICK1&lt;/span&gt;
        &lt;span class="n"&gt;AltNick&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NICK2&lt;/span&gt;
        &lt;span class="n"&gt;Ident&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;NICK1&lt;/span&gt;
        &lt;span class="n"&gt;RealName&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;REALNAME&lt;/span&gt;
        &lt;span class="n"&gt;Buffer&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
        &lt;span class="n"&gt;KeepBuffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
        &lt;span class="n"&gt;ChanModes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;stn&lt;/span&gt;
        &lt;span class="n"&gt;LoadModule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;
        &lt;span class="n"&gt;Server&lt;/span&gt;     &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CUSTOMIRCSERVER&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;6697&lt;/span&gt; &lt;span class="nx"&gt;IRCSERVERPASSWORD&lt;/span&gt;
        &lt;span class="n"&gt;BindHost&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nb"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;PASSWORDHASHHERE&lt;/code&gt; can be generated by using &lt;code&gt;znc -s&lt;/code&gt;. IRC clients
(like xchat) have to be set up by specifying in the "Server Password"
field a user's credentials &lt;code&gt;&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;&lt;/code&gt; (i.e
USER1:PASSORDHASHHERE).&lt;/p&gt;</summary><category term="ZNC"></category><category term="Docker"></category><category term="IRC"></category></entry><entry><title>Ubuntu VM auto installation</title><link href="http://www.florentflament.com/blog/ubuntu-vm-auto-installation.html" rel="alternate"></link><updated>2013-11-30T00:00:00+01:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com/blog,2013-11-30:ubuntu-vm-auto-installation.html</id><summary type="html">&lt;p&gt;Installing a fresh Ubuntu, or any other Linux distribution, on a new
system is quite forward. The installer asks you a few question about
your country, keyboard, network, ... . Then it installs all the
required packages on the system, and makes it bootable.&lt;/p&gt;
&lt;p&gt;However, when playing with VMs (Virtual Machines), you may wish to
install your distribution many times ; in which case the installation
process (with the questions to answer) becomes somehow tedious.&lt;/p&gt;
&lt;p&gt;There are several approaches to deal with this issue. This post will
deal with the automatic installation of an Ubuntu 12.04 Precise, by
using &lt;a href="http://www.debian.org/releases/stable/i386/apbs02.html.en"&gt;Debian preseeding mecanism&lt;/a&gt; with virt-install (virtinst
package).&lt;/p&gt;
&lt;p&gt;An alternative approach would be to do a manual full installation,
then making several copies of the installed image. Each copy will be
customized to be used for a new VM. These two methods have their pros
and cons, and can be used together.&lt;/p&gt;
&lt;p&gt;A running system with libvirt and virtinst packages is required. The
key of a preseed automatic installation is to have the good
&lt;code&gt;preseed.cfg&lt;/code&gt; file. This file will provide the Debian installer (also
used by Ubuntu) with all the information it requires to install and
configure the system, without the need to ask any question.&lt;/p&gt;
&lt;h2&gt;Preseed file&lt;/h2&gt;
&lt;p&gt;Here's my generic &lt;a href="http://www.florentflament.com/blog/static/preseed.cfg"&gt;preseed.cfg&lt;/a&gt; file. It is a mix of &lt;a href="http://www.debian.org/releases/squeeze/example-preseed.txt"&gt;Debian's
example-preseed&lt;/a&gt; file and parameters gathered using Debian's
suggested method after a manual installation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;debconf-get-selections --installer &amp;gt; file
debconf-get-selections &amp;gt;&amp;gt; file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The password for the &lt;code&gt;vmuser&lt;/code&gt; user has to be set, by changing the
current CRACKMECRACKM encrypted password to a valid one. A valid
crypted password can be generated with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;python -c &lt;span class="s1"&gt;&amp;#39;from crypt import crypt; print crypt(&amp;quot;MYPASSWORD&amp;quot;, &amp;quot;SALT&amp;quot;)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some other parameters may be customized, like locale, user name, ...&lt;/p&gt;
&lt;h2&gt;Empty image creation&lt;/h2&gt;
&lt;p&gt;Then we need to create an empty disk that will be used to install the
system. A 5GB disk should be enough for a minimal Ubuntu installation
(depending on one's requirements).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;qemu-img create vm.qcow2 5G
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;virt-install&lt;/h2&gt;
&lt;p&gt;Installing Ubuntu Precise on a VM can now be launched with the
following unique command (to be customized):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virt-install &lt;span class="se"&gt;\&lt;/span&gt;
--name vm &lt;span class="se"&gt;\&lt;/span&gt;
--ram 128 &lt;span class="se"&gt;\&lt;/span&gt;
--location http://fr.archive.ubuntu.com/ubuntu/dists/precise-proposed/main/installer-i386/ &lt;span class="se"&gt;\&lt;/span&gt;
--disk vm.qcow2,bus&lt;span class="o"&gt;=&lt;/span&gt;virtio &lt;span class="se"&gt;\&lt;/span&gt;
--graphics vnc,keymap&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;local&lt;/span&gt;,listen&lt;span class="o"&gt;=&lt;/span&gt;0.0.0.0,port&lt;span class="o"&gt;=&lt;/span&gt;5900 &lt;span class="se"&gt;\&lt;/span&gt;
--network user,model&lt;span class="o"&gt;=&lt;/span&gt;virtio &lt;span class="se"&gt;\&lt;/span&gt;
--initrd-inject preseed.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the &lt;code&gt;precise-proposed&lt;/code&gt; Ubuntu distribution is used instead
of the standard &lt;code&gt;precise&lt;/code&gt;. It addresses a &lt;a href="https://bugs.launchpad.net/ubuntu/+source/net-retriever/+bug/1067934"&gt;bug that makes the
installation freeze for 10+ minutes&lt;/a&gt; during the components download
phase.&lt;/p&gt;
&lt;p&gt;After some 30 minutes the system installation should be completed.&lt;/p&gt;</summary><category term="Ubuntu"></category><category term="KVM"></category><category term="libvirt"></category></entry><entry><title>Macmini2,1 Linux dual boot</title><link href="http://www.florentflament.com/blog/macmini21-linux-dual-boot.html" rel="alternate"></link><updated>2013-11-03T00:00:00+01:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com/blog,2013-11-03:macmini21-linux-dual-boot.html</id><summary type="html">&lt;p&gt;While online resources provide documentation about &lt;a href="https://wiki.debian.org/MacMiniIntel"&gt;how to install
Linux on a Mac Mini&lt;/a&gt;, this guide focuses on the Apple Macmini2,1
and its peculiarities. Please refer to &lt;a href="http://en.wikipedia.org/wiki/Macmini#Specifications"&gt;these tables&lt;/a&gt; to properly
identify your hardware.&lt;/p&gt;
&lt;h2&gt;About Macmini2,1&lt;/h2&gt;
&lt;p&gt;Apple provides &lt;a href="http://support.apple.com/kb/HT1237"&gt;firmware updates&lt;/a&gt; for most of its hardware. Most
Mac Minis do have an EFI Boot ROM update available there, but
Macmini2,1 doesn't. The good news is that what is stated on this page
is true, Macmini2,1 doesn't need any firmware update to be able to
boot non MacOS OSes.&lt;/p&gt;
&lt;p&gt;Macmini2,1 is powered by an Intel Core 2 Duo, which is a &lt;a href="http://en.wikipedia.org/wiki/Core_2_duo#64-bit_Core_microarchitecture_based"&gt;64-bit
processor&lt;/a&gt;. However, when trying to install a 64 bits Linux
distribution from a CDROM (by pressing the C key during boot sequence,
right after the startup sound), the installer hangs up on a text
screen, while seemingly starting to display a grub menu (I experienced
this with amd64 ISOs of Debian Wheezy, Debian Jessie and Xubuntu
Precise). With i386 images of these same distributions, the installer
starts in graphic mode without issue.&lt;/p&gt;
&lt;p&gt;However, I could find a way to install a 64 bits OS on the machine, by
booting the machine on a &lt;a href="http://rom-o-matic.net/gpxe/gpxe-git/gpxe.git/contrib/rom-o-matic/"&gt;CDROM launching a PXE installation&lt;/a&gt; over
the network. By using this mechanism, I succeeded in installing an
amd64 Ubuntu Precise Linux distribution. Note that I've been
unsuccessful in starting the computer from a USB key, or directly over
PXE.&lt;/p&gt;
&lt;h2&gt;Setting dual boot&lt;/h2&gt;
&lt;p&gt;On original Max OS X installations, the whole hard disk is occupied by
a unique partition. Therefore, we need to free some space for our new
OS, by resizing the partition. The &lt;code&gt;diskutil&lt;/code&gt; command allows us to do
that. In a shell, we have to launch the following command (where 20G
means that we want to let 20 Gigabytes to our OS X partition. One may
split the disk capacity according to its requirements):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo diskutil resizeVolume disk0s2 20G
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we have to install &lt;a href="http://refit.sourceforge.net/"&gt;rEFit&lt;/a&gt; on the computer. It will allow us
to choose the partition / device to boot, and to resynchronize GPT /
MBR tables as will be covered in a next step.&lt;/p&gt;
&lt;p&gt;We can now insert the Linux distribution installation CD into our Mac
(I downloaded the last &lt;a href="http://www.debian.org/distrib/netinst"&gt;Debian stable i386 netinst ISO&lt;/a&gt; and burned
it to a CD-RW with the Mac Mini's CD burner). When restarting the
computer, rEFit will allow us to boot on the CD.&lt;/p&gt;
&lt;p&gt;During the installation process, we have to create new partition(s)
(for convenience, I chose a distinct / and /home partitions). When
asked to install grub, choose &lt;code&gt;/dev/sda4&lt;/code&gt; (the partition that will be
mounted as /).&lt;/p&gt;
&lt;p&gt;Once the Linux installation is finished, reboot and use rEFit
&lt;code&gt;Partition Tool&lt;/code&gt; to resync GPT / MBR tables. Then boot back to MacOS
and use its &lt;code&gt;bless&lt;/code&gt; tool to make the new OS bootable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo bless --device /dev/disk0s4 -setBoot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eventually, we can customize the rEFit configuration file
&lt;code&gt;/efi/refit/refit.conf&lt;/code&gt; to make the boot sequence more convenient. The
rEFit menu timeout can be set with the &lt;code&gt;timeout&lt;/code&gt; option. The option
&lt;code&gt;default_selection&lt;/code&gt; (at the end of the file) allows us to choose the
default OS to boot.&lt;/p&gt;
&lt;p&gt;That's it ! Restart, rEFit allows us to choose between booting Mac OS
X and Linux.&lt;/p&gt;</summary><category term="Apple"></category><category term="Linux"></category></entry></feed>