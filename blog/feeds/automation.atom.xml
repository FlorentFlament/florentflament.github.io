<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Florent Flament - automation</title><link href="http://www.florentflament.com/blog/" rel="alternate"></link><link href="http://www.florentflament.com/blog/feeds/automation.atom.xml" rel="self"></link><id>http://www.florentflament.com/blog/</id><updated>2014-06-28T00:00:00+02:00</updated><entry><title>Git SSH Docker container</title><link href="http://www.florentflament.com/blog/git-ssh-docker-container.html" rel="alternate"></link><published>2014-06-28T00:00:00+02:00</published><updated>2014-06-28T00:00:00+02:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com,2014-06-28:/blog/git-ssh-docker-container.html</id><summary type="html">&lt;p&gt;My favorite option to backup and version my code and text files is
using git with a remote repository. The implementation I have chosen
for that consists in running an ssh server, with git, in a Docker
container. This has the following advantages over other solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100% reproducible;&lt;/li&gt;
&lt;li&gt;Limits access …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;My favorite option to backup and version my code and text files is
using git with a remote repository. The implementation I have chosen
for that consists in running an ssh server, with git, in a Docker
container. This has the following advantages over other solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100% reproducible;&lt;/li&gt;
&lt;li&gt;Limits access to the container in case the account is compromised;&lt;/li&gt;
&lt;li&gt;Consumes less resources that running a VM.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;The proposed Git SSH Dockerfile is based on the &lt;a href="https://docs.docker.com/examples/running_ssh_service/"&gt;Dockerizing an SSH
service&lt;/a&gt; example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:14.04

RUN apt-get -y update
RUN apt-get -y install openssh-server
RUN apt-get -y install git

&lt;span class="c1"&gt;# Setting openssh&lt;/span&gt;
RUN mkdir /var/run/sshd
RUN sed -i &lt;span class="s2"&gt;&amp;quot;s/#PasswordAuthentication yes/PasswordAuthentication no/&amp;quot;&lt;/span&gt; /etc/ssh/sshd_config

&lt;span class="c1"&gt;# Adding git user&lt;/span&gt;
RUN adduser --system git
RUN mkdir -p /home/git/.ssh

&lt;span class="c1"&gt;# Clearing and setting authorized ssh keys&lt;/span&gt;
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &amp;gt; /home/git/.ssh/authorized_keys
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;First SSH public key&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /home/git/.ssh/authorized_keys
RUN &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Second SSH public key&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; /home/git/.ssh/authorized_keys
&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="c1"&gt;# Updating shell to bash&lt;/span&gt;
RUN sed -i s#/home/git:/bin/false#/home/git:/bin/bash# /etc/passwd

EXPOSE &lt;span class="m"&gt;22&lt;/span&gt;
CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/usr/sbin/sshd&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;-D&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Running the container&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Building the image&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker.io build -t git-ssh_img .
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running the image&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo docker.io run -p &lt;span class="m"&gt;1234&lt;/span&gt;:22 -d --name git-ssh git-ssh_img
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The previous command maps the container's host port 1234 on the
container's SSH port. Of course, this port can be changed to any
value. One can then ssh to the container with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -p &lt;span class="m"&gt;1234&lt;/span&gt; git@&amp;lt;container_host&amp;gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="automation"></category><category term="Git"></category><category term="SSH"></category><category term="Docker"></category></entry><entry><title>Chef Server on Raspberry Pi</title><link href="http://www.florentflament.com/blog/chef-server-on-raspberry-pi.html" rel="alternate"></link><published>2014-03-03T00:00:00+01:00</published><updated>2014-03-03T00:00:00+01:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com,2014-03-03:/blog/chef-server-on-raspberry-pi.html</id><summary type="html">&lt;p&gt;&lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; devices are cheap, quiet, and powerful enough to run
a Debian based Linux Operating System called &lt;a href="http://www.raspbian.org/"&gt;Raspbian&lt;/a&gt;. Such
device would be very convenient to manage one's personal
infrastructure, composed of some physical and / or virtual machines,
by running Chef Server.&lt;/p&gt;
&lt;p&gt;While, the official Chef website mostly documents &lt;a href="http://www.getchef.com/chef/install/#tab2"&gt;the …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; devices are cheap, quiet, and powerful enough to run
a Debian based Linux Operating System called &lt;a href="http://www.raspbian.org/"&gt;Raspbian&lt;/a&gt;. Such
device would be very convenient to manage one's personal
infrastructure, composed of some physical and / or virtual machines,
by running Chef Server.&lt;/p&gt;
&lt;p&gt;While, the official Chef website mostly documents &lt;a href="http://www.getchef.com/chef/install/#tab2"&gt;the installation of
Chef Server on Ubuntu and (Red Hat) Enterprise Linux&lt;/a&gt;, Chef Server
is available through its API and already packaged for Raspbian as
package &lt;code&gt;chef-server-api&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The installation of Chef Server on a Raspberry Pi is therefore quite
forward. The steps to follow, that are described below, are somehow
inspired from these &lt;a href="http://www.cschramm.net/howtos/installing-chef-server-debian/"&gt;instructions to have Chef Server installed on
Debian using binary packages&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installation procedure&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start from a fresh installation of Raspbian on a Raspberry Pi. From
NOOBS menu, install Raspbian (Using NOOBS v1.2.1).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install Chef Server binary package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get install chef-server-api
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configure Chef Server, by answering to the two questions that will
  be asked:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL of Chef server: http://CHEF_SERVER_IP:4000&lt;/li&gt;
&lt;li&gt;Chef AMQP user password: RANDOM_PASSWORD (Avoid using special
  characters)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: Some services won't start, like jetty. &lt;code&gt;chef-server&lt;/code&gt; will also
be said to have failed, but Chef Server APIs will be working anyway.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing:&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root@raspberrypi:~# knife configure -i
WARNING: No knife configuration file found
Where should I put the config file? [/root/.chef/knife.rb] 
Please enter the chef server URL: [http://raspberrypi:4000] http://CHEF_SERVER_IP:4000
Please enter a clientname for the new client: [pi] root
Please enter the existing admin clientname: [chef-webui] 
Please enter the location of the existing admin client&amp;#39;s private key: [/etc/chef/webui.pem] 
Please enter the validation clientname: [chef-validator] 
Please enter the location of the validation key: [/etc/chef/validation.pem] 
Please enter the path to a chef repository (or leave blank): 
Creating initial API user...
Created client[root]
Configuration file written to /root/.chef/knife.rb
root@raspberrypi:~# knife client list
  chef-validator
  chef-webui
  root
root@raspberrypi:~#
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Update of 2014/03/03&lt;/h2&gt;
&lt;p&gt;Note that I hit the bug &lt;a href="https://tickets.opscode.com/browse/CHEF-3170"&gt;Rabbitmq does not appear to get configured
when installing chef-server via deb packages&lt;/a&gt;. I got errors when
launching commands &lt;code&gt;knife client create&lt;/code&gt; or &lt;code&gt;knife client reregister&lt;/code&gt;,
with following message in &lt;code&gt;rabbitmq&lt;/code&gt; log:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;=ERROR REPORT==== 4-Jun-2012::14:56:01 ===
exception on TCP connection &amp;lt;0.583.0&amp;gt; from 127.0.0.1:34143
{channel0_error,starting,
    {amqp_error,access_refused,
        &amp;quot;AMQPLAIN login refused: user &amp;#39;chef&amp;#39; - invalid credentials&amp;quot;,
        &amp;#39;connection.start_ok&amp;#39;}}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fix consists in executing the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo rabbitmqctl add_vhost /chef
$ sudo rabbitmqctl add_user chef PASSWORD_PER_CONFIGURATION
$ sudo rabbitmqctl set_permissions -p /chef chef &lt;span class="s2"&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.*&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.*&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="automation"></category><category term="Chef"></category><category term="Raspberry Pi"></category><category term="Raspbian"></category></entry><entry><title>ZNC in Docker container</title><link href="http://www.florentflament.com/blog/znc-in-docker-container.html" rel="alternate"></link><published>2013-12-15T00:00:00+01:00</published><updated>2013-12-15T00:00:00+01:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com,2013-12-15:/blog/znc-in-docker-container.html</id><summary type="html">&lt;p&gt;&lt;a href="http://wiki.znc.in/ZNC"&gt;ZNC&lt;/a&gt; is a popular IRC bouncer, which stays connected to IRC
channels and log conversations while one isn't connected. This note
desrcibes how to launch ZNC in a &lt;a href="https://www.docker.io/"&gt;Docker&lt;/a&gt; container, so that it be
launched on any Docker enabled platform. To quick start with Docker,
one can follow the steps …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://wiki.znc.in/ZNC"&gt;ZNC&lt;/a&gt; is a popular IRC bouncer, which stays connected to IRC
channels and log conversations while one isn't connected. This note
desrcibes how to launch ZNC in a &lt;a href="https://www.docker.io/"&gt;Docker&lt;/a&gt; container, so that it be
launched on any Docker enabled platform. To quick start with Docker,
one can follow the steps proposed to &lt;a href="http://docs.docker.io/en/latest/installation/ubuntulinux/"&gt;install Docker on an Ubuntu
Linux&lt;/a&gt; (for instance in a VM).&lt;/p&gt;
&lt;h2&gt;Using ZNC setup wizard&lt;/h2&gt;
&lt;p&gt;Once Docker is installed on the system, we can prepare an image that
will be used to run ZNC with the following &lt;code&gt;Dockerfile&lt;/code&gt; (Docker
configuration file):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:precise
MAINTAINER Florent Flament

# Using fr ubuntu mirrors and adding universe repository, to install znc
RUN echo &amp;quot;deb http://fr.archive.ubuntu.com/ubuntu precise main restricted&amp;quot; \
&amp;gt; /etc/apt/sources.list
RUN echo &amp;quot;deb http://fr.archive.ubuntu.com/ubuntu precise universe&amp;quot; \
&amp;gt;&amp;gt; /etc/apt/sources.list

# Installing znc package
RUN apt-get -y update
RUN apt-get -y install znc

# Creating directory to store znc configuration
RUN mkdir -m 775 /var/znc
RUN chgrp daemon /var/znc
USER daemon
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's assume that the &lt;code&gt;Dockerfile&lt;/code&gt; is stored in the &lt;code&gt;znc-noconf&lt;/code&gt;
directory. We can build the ZNC ready image with the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t znc:noconf znc-noconf/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next step is to configure ZNC. The following command will run the
configuration wizard in a new container based on the previously
generated image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -i -t znc:noconf -d /var/znc -c
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After having answered to all the questions, ZNC will generate its
configuration files. It will then be ready to run in daemon mode. Now
we can save a Docker image including ZNC's configuration files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nv"&gt;CONT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;docker ps -a &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;minutes ago&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; head -1 &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
$ docker commit &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; -run&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{&amp;quot;Cmd&amp;quot;: [&amp;quot;/usr/bin/znc&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;-d&amp;quot;, &amp;quot;/var/znc/&amp;quot;], &amp;quot;User&amp;quot;: &amp;quot;daemon&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&amp;gt; &lt;span class="nv"&gt;$CONT&lt;/span&gt; znc:ready
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The ZNC image is now ready, and can be launched. In addition to launch
ZNC in a new container, the following command will map the host's 6697
TCP port on the container's 6697 port (assuming that ZNC has been
configured to listen to port 6697).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker run -d -p &lt;span class="m"&gt;6697&lt;/span&gt;:6697 znc:ready
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Using a previously made ZNC configuration file&lt;/h2&gt;
&lt;p&gt;One can setup a ZNC Docker container even quicker if he already has a
&lt;code&gt;znc.conf&lt;/code&gt; configuration file. One has to create a directory (for
instance &lt;code&gt;myznc/&lt;/code&gt;) containing both: &lt;code&gt;znc.conf&lt;/code&gt; and a &lt;code&gt;Dockerfile&lt;/code&gt;, with
the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FROM ubuntu:precise
MAINTAINER Florent Flament

# Using fr ubuntu mirrors and adding universe repository, to install znc
RUN echo &amp;quot;deb http://fr.archive.ubuntu.com/ubuntu precise main restricted&amp;quot; \
&amp;gt; /etc/apt/sources.list
RUN echo &amp;quot;deb http://fr.archive.ubuntu.com/ubuntu precise universe&amp;quot; \
&amp;gt;&amp;gt; /etc/apt/sources.list

# Installing znc package
RUN apt-get -y update
RUN apt-get -y install znc

# Creating directory to store znc configuration
RUN mkdir -m 775 /var/znc
# Generates key for SSL exchanges
RUN /usr/bin/znc -d /var/znc -p
# Copies ZNC configuration file
ADD znc.conf /var/znc/configs/
RUN chown -R daemon:daemon /var/znc
USER daemon

# Setting default container&amp;#39;s command
CMD [&amp;quot;/usr/bin/znc&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;-d&amp;quot;, &amp;quot;/var/znc/&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then the ZNC container can be launched right after having built the image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t znc:myznc myznc/
$ docker run -d -p &lt;span class="m"&gt;6697&lt;/span&gt;:6697 znc:myznc
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Update 2014/02/25&lt;/h2&gt;
&lt;p&gt;Here's an example of ZNC configuration file listening for SSL incoming
connexions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Listener4  = +6697

&lt;span class="nt"&gt;&amp;lt;User&lt;/span&gt; &lt;span class="err"&gt;USER1&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Pass       = PASSWORDHASHHERE
        Admin      = true
        Nick       = NICK1
        AltNick    = NICK2
        Ident      = NICK1
        RealName   = REALNAME
        Buffer     = 500
        KeepBuffer = true
        ChanModes  = +stn
        LoadModule = admin
        Server     = irc.freenode.net 6667 
        BindHost   = 0.0.0.0
&lt;span class="nt"&gt;&amp;lt;/User&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;User&lt;/span&gt; &lt;span class="err"&gt;USER2&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        Pass       = PASSWORDHASHHERE
        Admin      = true
        Nick       = NICK1
        AltNick    = NICK2
        Ident      = NICK1
        RealName   = REALNAME
        Buffer     = 500
        KeepBuffer = true
        ChanModes  = +stn
        LoadModule = admin
        Server     = CUSTOMIRCSERVER +6697 IRCSERVERPASSWORD
        BindHost   = 0.0.0.0
&lt;span class="nt"&gt;&amp;lt;/User&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;PASSWORDHASHHERE&lt;/code&gt; can be generated by using &lt;code&gt;znc -s&lt;/code&gt;. IRC clients
(like xchat) have to be set up by specifying in the "Server Password"
field a user's credentials &lt;code&gt;&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;&lt;/code&gt; (i.e
USER1:PASSORDHASHHERE).&lt;/p&gt;</content><category term="automation"></category><category term="ZNC"></category><category term="Docker"></category><category term="IRC"></category></entry><entry><title>Ubuntu VM auto installation</title><link href="http://www.florentflament.com/blog/ubuntu-vm-auto-installation.html" rel="alternate"></link><published>2013-11-30T00:00:00+01:00</published><updated>2013-11-30T00:00:00+01:00</updated><author><name>Florent Flament</name></author><id>tag:www.florentflament.com,2013-11-30:/blog/ubuntu-vm-auto-installation.html</id><summary type="html">&lt;p&gt;Installing a fresh Ubuntu, or any other Linux distribution, on a new
system is quite forward. The installer asks you a few question about
your country, keyboard, network, ... . Then it installs all the
required packages on the system, and makes it bootable.&lt;/p&gt;
&lt;p&gt;However, when playing with VMs (Virtual Machines), you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Installing a fresh Ubuntu, or any other Linux distribution, on a new
system is quite forward. The installer asks you a few question about
your country, keyboard, network, ... . Then it installs all the
required packages on the system, and makes it bootable.&lt;/p&gt;
&lt;p&gt;However, when playing with VMs (Virtual Machines), you may wish to
install your distribution many times ; in which case the installation
process (with the questions to answer) becomes somehow tedious.&lt;/p&gt;
&lt;p&gt;There are several approaches to deal with this issue. This post will
deal with the automatic installation of an Ubuntu 12.04 Precise, by
using &lt;a href="http://www.debian.org/releases/stable/i386/apbs02.html.en"&gt;Debian preseeding mecanism&lt;/a&gt; with virt-install (virtinst
package).&lt;/p&gt;
&lt;p&gt;An alternative approach would be to do a manual full installation,
then making several copies of the installed image. Each copy will be
customized to be used for a new VM. These two methods have their pros
and cons, and can be used together.&lt;/p&gt;
&lt;p&gt;A running system with libvirt and virtinst packages is required. The
key of a preseed automatic installation is to have the good
&lt;code&gt;preseed.cfg&lt;/code&gt; file. This file will provide the Debian installer (also
used by Ubuntu) with all the information it requires to install and
configure the system, without the need to ask any question.&lt;/p&gt;
&lt;h2&gt;Preseed file&lt;/h2&gt;
&lt;p&gt;Here's my generic &lt;a href="http://www.florentflament.com/blog/static/preseed.cfg"&gt;preseed.cfg&lt;/a&gt; file. It is a mix of &lt;a href="http://www.debian.org/releases/squeeze/example-preseed.txt"&gt;Debian's
example-preseed&lt;/a&gt; file and parameters gathered using Debian's
suggested method after a manual installation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;debconf-get-selections --installer &amp;gt; file
debconf-get-selections &amp;gt;&amp;gt; file
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The password for the &lt;code&gt;vmuser&lt;/code&gt; user has to be set, by changing the
current CRACKMECRACKM encrypted password to a valid one. A valid
crypted password can be generated with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -c &lt;span class="s1"&gt;&amp;#39;from crypt import crypt; print crypt(&amp;quot;MYPASSWORD&amp;quot;, &amp;quot;SALT&amp;quot;)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some other parameters may be customized, like locale, user name, ...&lt;/p&gt;
&lt;h2&gt;Empty image creation&lt;/h2&gt;
&lt;p&gt;Then we need to create an empty disk that will be used to install the
system. A 5GB disk should be enough for a minimal Ubuntu installation
(depending on one's requirements).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;qemu-img create vm.qcow2 5G
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;virt-install&lt;/h2&gt;
&lt;p&gt;Installing Ubuntu Precise on a VM can now be launched with the
following unique command (to be customized):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virt-install &lt;span class="se"&gt;\&lt;/span&gt;
--name vm &lt;span class="se"&gt;\&lt;/span&gt;
--ram &lt;span class="m"&gt;128&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--location http://fr.archive.ubuntu.com/ubuntu/dists/precise-proposed/main/installer-i386/ &lt;span class="se"&gt;\&lt;/span&gt;
--disk vm.qcow2,bus&lt;span class="o"&gt;=&lt;/span&gt;virtio &lt;span class="se"&gt;\&lt;/span&gt;
--graphics vnc,keymap&lt;span class="o"&gt;=&lt;/span&gt;local,listen&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.0.0.0,port&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5900&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
--network user,model&lt;span class="o"&gt;=&lt;/span&gt;virtio &lt;span class="se"&gt;\&lt;/span&gt;
--initrd-inject preseed.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that the &lt;code&gt;precise-proposed&lt;/code&gt; Ubuntu distribution is used instead
of the standard &lt;code&gt;precise&lt;/code&gt;. It addresses a &lt;a href="https://bugs.launchpad.net/ubuntu/+source/net-retriever/+bug/1067934"&gt;bug that makes the
installation freeze for 10+ minutes&lt;/a&gt; during the components download
phase.&lt;/p&gt;
&lt;p&gt;After some 30 minutes the system installation should be completed.&lt;/p&gt;</content><category term="automation"></category><category term="Ubuntu"></category><category term="KVM"></category><category term="libvirt"></category></entry></feed>